class Solution {
    public boolean isValidSudoku(char[][] board) {
     
        for (int i=0;i<9;i++){
            
            for (int j=0;j<9;j++){
                
                if (!isValidConfig(board,i,j)){
                    return false;
                }
                
            }
        }
        return true;
        
    }
    public boolean isValidConfig(char[][] board,int row,int col){
        
        return isRowCheck(board,row) && isColCheck(board,col) && 
            isBoxCheck(board,row-row%3,col-col%3);
    }
                    
    public boolean isBoxCheck(char[][] board,int row,int col){
        HashSet <Character> set=new HashSet<>();

        for (int i=0;i<3;i++){
            for (int j=0;j<3;j++){
                char curr=board[i+row][j+col];
                if (set.contains(curr)){
                    return false;
                }
                if (curr!='.'){
                    set.add(curr);
                }
            }
        }
        return true;
    }
                    
                
    // Check in the rows
    public boolean isRowCheck(char[][] board,int row){
        HashSet <Character> set=new HashSet<>();
        for (int i=0;i<9;i++){
            
            if (set.contains(board[row][i])){
                return false;
            }  
            if (board[row][i]!='.'){
                set.add(board[row][i]);
            }
        }
        return true;
    }

    // Check in the columns
    public boolean isColCheck(char[][] board,int col){
        HashSet <Character> set=new HashSet<>();
        for (int i=0;i<9;i++){
            
            if (set.contains(board[i][col])){
                return false;
            }  
            if (board[i][col]!='.'){
                set.add(board[i][col]);
            }
        }
        return true;
    }
}
